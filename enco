#!/usr/bin/env python3
import os, base64, sys
from argparse import ArgumentParser
from getpass import getpass
from cryptography.fernet import Fernet, InvalidToken
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend

from tqdm import tqdm

def generate_unique_filename(file: str):
    base, extension = os.path.splitext(file)
    counter = 1
    
    new_filepath = file
    while os.path.exists(new_filepath):
        new_filepath = f"{base}_{counter}{extension}"
        counter += 1
    
    return new_filepath

def derive_key(password: bytes, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=salt, iterations=100000, backend=default_backend())
    return base64.urlsafe_b64encode(kdf.derive(password))

def create_password():
    while True:
        pswd = getpass("Create file encryption password: ")
    
        if not pswd:
            print("Password is too short")
            continue

        verify = getpass("Repeat the password: ")
        
        if pswd == verify:
            return pswd.encode()
        
        print("Passwords dont match.")

def get_password():
    pswd = None
    while not pswd:
        pswd = getpass("Enter the password: ")
    return pswd.encode()

def encrypt_file(in_file: str, chunk_size=64 * 1024):
    out_file = generate_unique_filename(in_file + '.enco')
    salt = os.urandom(16)
    fernet = Fernet(derive_key(create_password(), salt))

    try:
        total_size = os.path.getsize(in_file)
        with open(in_file, 'rb') as f_in, open(out_file, 'wb') as f_out:
            f_out.write(salt)

            with tqdm(total=total_size, unit='B', unit_scale=True, desc='Encrypting') as pbar:
                while chunk := f_in.read(chunk_size):
                    encrypted_chunk = fernet.encrypt(chunk)
                    f_out.write(encrypted_chunk)
                    f_out.write(b'\n')
                    pbar.update(len(chunk))

    except Exception as e:
        print(f"Error during encryption: {e}")
        os.remove(out_file)


def decrypt_file(in_file: str, out_dir: str, chunk_size=64 * 1024):
    out_name = os.path.split(in_file)[-1].rsplit('.enco', 1)[0]
    out_file = os.path.join(out_dir, generate_unique_filename(out_name))

    total_size = os.path.getsize(in_file)
    with open(in_file, 'rb') as f_in, open(out_file, 'wb') as f_out:
        fernet = Fernet(derive_key(get_password(), f_in.read(16)))

        with tqdm(total=total_size, unit='B', unit_scale=True, desc='Decrypting') as pbar:
            while line := f_in.readline():
                try:
                    decrypted_chunk = fernet.decrypt(line)
                    f_out.write(decrypted_chunk)
                    pbar.update(len(line)) 

                except InvalidToken:
                    os.remove(out_file)
                    return print("Incorrect password or corrupted file")


def main(args):
    try:
        if args.encrypt:
            path = os.path.abspath(os.path.expanduser(args.encrypt))

            if not os.path.exists(path):
                return print(f"File {path} does not exist")
            
            elif os.path.isdir(path):
                return print(f"Path {path} is a directory.")
            
            encrypt_file(path)

        elif args.decrypt:
            if not args.decrypt:
                return print("No file provided for decryption.")

            encrypted_file = args.decrypt[0]

            if not encrypted_file.endswith('.enco'):
                return print("Encrypted file shoud have .enco extension")

            dest = os.getcwd() 

            if len(args.decrypt) > 1:
                dest = os.path.abspath(os.path.expanduser(args.decrypt[1]))

                if not os.path.exists(dest) or not os.path.isdir(dest):
                    print(f"Invalid destination directory {dest}. Using current directory...")

            decrypt_file(encrypted_file, dest)

    except KeyboardInterrupt:
        print("\nOperation canceled by user.")

if __name__ == '__main__':
    parser = ArgumentParser(description="A small app for encryption/decryption of any file")
    parser.add_argument("-e", "--encrypt", metavar='FILE', type=str, 
                        help="Encrypt the specified file.")
    
    parser.add_argument("-d", "--decrypt", metavar=('FILE', 'DESTINATION'), type=str, 
                        nargs='*', help="Decrypt the specified file. Provide destination if needed.")
    
    args = parser.parse_args()

    if any(vars(args).values()):
        main(args)
    else:
        parser.print_help()
